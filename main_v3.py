import random
from buttons import (
    help_button,
    help_my_button,
    new_button,
    cancel_button,
    edit_time_button,
    setting_button,
    setting_hero_button,
    subscription_button,
)
import chatterbox
import logging
from datetime import datetime, timedelta

import pandas as pd

from sqlalchemy import create_engine

from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)

from send_query_sql import insert_and_update_sql

from work import (
    TELEGRAM_TOKEN,
    stop_word,
    url_engine,
    my_tid,
    working_folder,
)


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(process)d-%(levelname)s %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)

engine = create_engine(url_engine)

user_triger = {}
group_triger = {}


class UserData:
    def __init__(self) -> None:
        self._dict: dict[int, dict[str, str]] = dict()
        return

    @property
    def data(self) -> dict[int, dict[str, str]]:
        return self._dict

    def update(self, user_id: int, data: dict[str, str]) -> None:
        if user_id not in self._dict:
            self._dict.update({user_id: {}})
        self._dict[user_id].update(data)
        return

    def delete(self, user_id: int) -> None:
        if user_id in self._dict:
            self._dict.pop(user_id)
        return


async def get_type_msg(update: Update) -> str:
    if "edited_message" in str(update):
        type_msg: str = "edited_message"
    else:
        type_msg = "message"
    return type_msg


async def chat_type(update: Update) -> str:
    type_msg = await get_type_msg(update)
    return update[type_msg].chat.type


async def get_user_id(update: Update) -> int:
    user_id: int = 0
    type_msg = await get_type_msg(update)
    if update[type_msg] or update.effective_chat:
        if update.message.from_user:
            user_id = update[type_msg].from_user.id
        else:
            user_id = update.effective_chat.id
    return user_id


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.effective_chat and context:
        user_id = await get_user_id(update)
        if update.message.chat:
            if update.message.chat.type == "private":
                user_search = pd.read_sql(
                    "SELECT name FROM heroes_of_users "
                    "WHERE user_id = %(user_id)s;",
                    params={"user_id": user_id},
                    con=engine,
                )
                if not user_search.empty:
                    sms = f'–ü—Ä–∏–≤–µ—Ç, {str(user_search.loc[0,"name"])}'
                    await user(update, context, sms)
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="–Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! "
                        "–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?",
                    )
                    user_triger[user_id] = {
                        "triger": "reg_start",
                        "first": True,
                        "rename": False,
                    }
            else:
                user_search = pd.read_sql(
                    "SELECT name_clan, start FROM clans "
                    "WHERE user_id = %(user_id)s;",
                    params={"user_id": user_id},
                    con=engine,
                )
                if not user_search.empty:
                    if user_search.loc[0, "start"] == 1:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–ü—Ä–∏–≤–µ—Ç, {user_search.loc[0,'name_clan']}!",
                        )
                    else:
                        await insert_and_update_sql(
                            "UPDATE clans SET start = '1' "
                            "WHERE chat_id = :chat_id;",
                            params={"chat_id": update.effective_chat.id},
                        )
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=f"""–ü—Ä–∏–≤–µ—Ç, {user_search.loc[0, 'name_clan']}!
–Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!üòà""",
                        )
                else:
                    await insert_and_update_sql(
                        "INSERT INTO clans(chat_id, name_clan) "
                        "VALUES(:chat_id, :name_clan);",
                        params={
                            "chat_id": update.effective_chat.id,
                            "name_clan": update.effective_chat.title,
                        },
                    )

                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ—é—Ü–∏–∫!",
                    )
    return


async def stop(update: Update, context: CallbackContext) -> None:
    if context:
        user_id = await get_user_id(update)
        if chat_type(update) != "private":
            user_search = pd.read_sql(
                "SELECT name_clan, start FROM clans "
                "WHERE user_id = %(user_id)s;",
                params={"user_id": user_id},
                con=engine,
            )
            if not user_search.empty:
                if user_search.loc[0, "start"] == 0:
                    await context.bot.send_message(
                        chat_id=user_id, text=f"–ê —á—Ç–æ —è? –Ø –º–æ–ª—á—É!‚òπÔ∏è"
                    )
                else:
                    await insert_and_update_sql(
                        "UPDATE clans SET start = '0' "
                        "WHERE chat_id = :chat_id;",
                        params={"chat_id": update.effective_chat.id},
                    )
                    await context.bot.send_message(
                        chat_id=user_id, text=f"–û–∫, —è –≤—Å–µ –ø–æ–Ω—è–ª!‚òπÔ∏è\n–Ø –ø–æ—à–µ–ª..."
                    )
    return


async def user(
    update: Update, context: ContextTypes.DEFAULT_TYPE, sms: str
) -> None:
    if update.message or update.effective_chat and context:
        if update.message.from_user.id in user_triger:
            user_triger.pop(update.message.from_user.id)
        elif update.effective_chat.id in user_triger:
            user_triger.pop(update.effective_chat.id)
    if chat_type(update) == "private":
        await new_button(update, sms)


async def helper(update: Update, context: CallbackContext) -> None:
    if chat_type(update) == "private":
        if context:
            user_id: int = await get_user_id(update)
        user_search = pd.read_sql(
            "SELECT name FROM heroes_of_users "
            "WHERE user_id = %(user_id)s';",
            params={"user_id": user_id},
            con=engine,
        )
        if not user_search.empty:
            sms = """
–ù–∞–ø–∏—à–∏ \"–ü—Ä–∏–≤–µ—Ç\" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫.
–ú–æ–∂–µ—à—å –∫–∏–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π (—Ü–∏—Ñ—Ä–∞–º–∏) –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∫–∞–º–Ω–µ–π.
–ó–∞–≥–ª—è–Ω–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–º –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ \
—Å–±–æ—Ä—É —Ö–∞–ª—è–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–∞–º–Ω—è–º –∑–∞ —á–∞—Å –¥–æ —Å–º–µ–Ω—ã –ö.–ó.\
(–∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è)
–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–µ–ª—å –≤ –∏–≥—Ä–µ, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∏–∫ –∏ —Ç–∞–∫–∂–µ –∫–∏–¥–∞—Ç—å –Ω–∞ \
–Ω–µ–≥–æ –∫–æ–ª-–≤–æ –∫–∞–º–Ω–µ–π, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª—å—à–µ 5 –≥–µ—Ä–æ–µ–≤!
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–ø–∏—à–∏ /start \
(–Ω–µ –ø–æ–º–æ–≥–ª–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ @Menace134)
"""
            await new_button(update, sms)
            info = pd.read_sql(
                "SELECT COUNT(*) FROM admins " "WHERE user_id = %(user_id)s';",
                params={"user_id": user_id},
                con=engine,
            )
            if info.loc[0, "count"] != 0:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–î–ª—è —Ç–µ–±—è, {update.message.from_user.first_name}, "
                    "–µ—â—ë –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n "
                    "–¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å:\n - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –∏–≥—Ä–æ–∫—É\n"
                    "- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏\n"
                    "- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–°–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    '- –Ω–∞–ø–∏—Å–∞—Ç—å –≤ "—Ñ–ª—É–¥–∏–ª–∫—É" –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.\n'
                    "- —É–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞‚ò†",
                )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="–Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! "
                "–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?",
            )
            user_triger[user_id] = {
                "triger": "reg_start",
                "first": True,
                "rename": False,
            }
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–∏–≤–µ—Ç, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...!",
        )


async def print_rock(update, context, info):
    """–≤—ã–≤–æ–¥ –∫–∞–º–Ω–µ–π"""
    hours = int(info.loc[0, "time_change_kz"])
    now = datetime.now()
    time1 = timedelta(
        days=now.day, hours=now.hour, minutes=now.minute, seconds=now.second
    )
    time2 = timedelta(days=now.day, hours=hours, minutes=30, seconds=0)
    time3 = time2 - time1
    if time3.days == -1:
        time2 = timedelta(days=now.day + 1, hours=hours, minutes=30, seconds=0)
        time3 = time2 - time1
    if int(info.loc[0, "rock"]) == 0:
        sms = (
            "–¢—ã –µ—â–µ –Ω–µ –≤–≤–æ–¥–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–∏—Ö –∫–∞–º–Ω–µ–π. "
            "–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏!"
        )
    else:
        sms = (
            f"–£ —Ç–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è –ø–æ–¥ –Ω–∏–∫–æ–º \"{info.loc[0, 'name']}\" "
            f"- \"{info.loc[0, 'rock']}\" –∫–∞–º–Ω–µ–π! –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∏—Ç—å "
            f"{600 - int(info.loc[0, 'rock'])}. –î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ö.–ó. –æ—Å—Ç–∞–ª–æ—Å—å "
            f"{time3}"
        )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=sms)


async def edit(update, context, num, info, delete):
    if delete:
        callback = "delete"
        text = "–ö–æ–≥–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?"
    else:
        callback = "edit_name"
        text = "–ö–æ–≥–æ –±—É–¥–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å?"
    keyboard = []
    for i in range(num):
        keyboard += [
            [
                InlineKeyboardButton(
                    str(info.loc[i, "name"]),
                    callback_data=f'{callback}-{info.loc[i, "id"]}',
                )
            ]
        ]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def edit_name(update, context, id_hero: int):
    await context.bot.send_message(
        chat_id=update.message.from_user.id, text="–ù–∞ –∫–∞–∫–æ–µ –∏–º—è –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?"
    )
    user_triger[update.message.from_user.id] = {
        "triger": "edit_name",
        "id": id_hero,
    }


async def add_rock(update, context, upg_rock: int, id_hero) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π"""
    try:
        info = pd.read_sql(
            "SELECT rock FROM heroes_of_users WHERE id = %(id_hero)s;",
            params={"id_hero": id_hero},
            con=engine,
        )
        rock = int(info.loc[0, "rock"])
        if rock == 0 or rock < upg_rock:
            await insert_and_update_sql(
                "UPDATE heroes_of_users "
                "SET rock = :upg_rock WHERE id = :id_hero;",
                params={
                    "upg_rock": upg_rock,
                    "id_hero": id_hero,
                },
            )
            rock_minus = 600 - upg_rock
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–û–∫, —è –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è. "
                f"–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∏—Ç—å {rock_minus}",
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–¢—ã –º–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω–µ—à—å! –í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ —Ç—ã –ø–∏—Å–∞–ª {rock}",
            )
    except Exception:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! "
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ @Menace134.",
        )


async def time_zone(update, context, msg, tz, id_hero) -> None:
    """–£–∑–Ω–∞–µ–º —á–∞—Å–æ–≤–æ–π –≤–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–º–µ–Ω–∞ –ö–ó"""
    try:
        user_id = await get_user_id(update)
        if msg in stop_word:
            sms = "–û—Ç–º–µ–Ω–∞"
            await setting_hero_button(update, sms)
            return
        else:
            if msg.isnumeric():
                if 1 <= int(msg) <= 24:
                    if tz:  # –ö–ó
                        await insert_and_update_sql(
                            """"UPDATE heroes_of_users
                            SET time_change_kz = :msg
                            WHERE user_id = :user_id and id = :id_hero;""",
                            params={
                                "msg": msg,
                                "user_id": user_id,
                                "id_hero": id_hero,
                            },
                        )
                    else:  # —ç–Ω–µ—Ä–≥–∏—è
                        await insert_and_update_sql(
                            """"UPDATE heroes_of_users
                            SET time_collection_energy = :msg
                            WHERE user_id = :user_id and id = :id_hero;""",
                            params={
                                "msg": msg,
                                "user_id": user_id,
                                "id_hero": id_hero,
                            },
                        )
                    sms = (
                        "–í—Ä–µ–º—è —É–º–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                        "–ï—Å–ª–∏ –í—ã –æ—à–∏–±–ª–∏—Å—å –∏–ª–∏ –≤—Ä–µ–º—è –ø–æ–º–µ–Ω—è–µ—Ç—Å—è, "
                        "–≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏ —Ç—É—Ç.\n\n"
                        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è‚öôÔ∏è ---> "
                        "–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è..."
                    )

                    await edit_time_button(update, sms)
                else:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–≤–µ!",
                    )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, text="–í–≤–æ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏"
                )
    except Exception:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ @Menace134 –æ–± —ç—Ç–æ–º.",
        )
        await context.bot.send_message(
            chat_id=my_tid,
            text=f"{update.message.from_user.first_name} "
            "–ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è...–û–®–ò–ë–ö–ê",
        )


async def delete_person(update, context, id_hero) -> None:
    """–£–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–µ—Ä—Å–æ–≤
    –∏ —Å–º–µ—â–∞–µ–º –∏—Ö –∫ —Ç–æ–º—É –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ–º"""
    info = pd.read_sql(
        "SELECT * FROM heroes_of_users WHERE id = %(id_hero)s;",
        params={"id_hero": id_hero},
        con=engine,
    )
    await insert_and_update_sql(
        "DELETE FROM heroes_of_users "
        "WHERE user_id = :user_id AND id = :id_hero;",
        params={
            "user_id": update.effective_chat.id,
            "id_hero": id_hero,
        },
    )
    await new_button(
        update, sms=f"–ì–µ—Ä–æ–π —Å –Ω–∏–∫–æ–º \"{info.loc[0, 'name']}\" —É–¥–∞–ª–µ–Ω!"
    )
    return


async def first_sms(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    sms = """–°–µ–π—á–∞—Å –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –∫–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ __18:30__, –∞ –ø–µ—Ä–≤—ã–π —Å–±–æ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ __12:00__ \(__*–ø–æ –ú–°–ö*__\)\.

    *–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–≤–µ—Ä–Ω–æ, —Ç–æ —ç—Ç–æ –º–æ–∂–Ω–æ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\!*
    –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è* \-\-\-\> *–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è\.\.\.*

    *–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ __–±–µ—Å–ø–ª–∞—Ç–Ω–æ__ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏\!*
    –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–∏–º *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è* \-\-\-\> *–ü–æ–¥–ø–∏—Å–∫–∏\.\.\.*
    """
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=sms, parse_mode="MarkdownV2"
    )


async def button(update: Update, context: CallbackContext) -> None:
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    if "YES" in query.data:
        await update.callback_query.message.delete()
        if "-" in query.data:
            list_answer = query.data.split("-")
            if len(list_answer) > 2 and list_answer[1] == "DELETE":
                id_hero = int(list_answer[2])
                await delete_person(update, context, id_hero)
        else:
            await setting_hero_button(update, "–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã)")
            try:
                await first_sms(update, context)
            except Exception as err:
                logging.error(err)
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {update.effective_chat.id}")
        if update.effective_chat.id in user_triger:
            user_triger.pop(update.effective_chat.id)

    elif "NO" in query.data:
        await update.callback_query.message.delete()
        if "-" in query.data:
            list_answer = query.data.split("-")
            # if len(list_answer) > 2 and list_answer[1] == "DELETE":
            #     info = pd.read_sql(
            #     f"SELECT * FROM bot_users
            #     WHERE user_id = '{update.effective_chat.id}';", engine)
            #     num = int(info.loc[0, 'num_pers'])
            #     edit(update, context, num, info, True)
        else:
            await query.edit_message_text(
                "–û–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?"
            )
            user_triger[update.effective_chat.id] = {
                "triger": "reg_start",
                "first": True,
                "rename": True,
            }
    elif "Add_Rock" in query.data:
        sms = int(query.data.split("-")[1])
        id_hero = query.data.split("-")[2]
        await add_rock(update, context, sms, id_hero)
    elif "delete" in query.data:
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º id —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å,
        # –∏ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω—è–µ–º, —Ç–æ—á–Ω–æ –ª–∏?
        id_hero = query.data.split("-")[1]
        await update.callback_query.message.delete()
        info = pd.read_sql(
            f"SELECT name FROM heroes_of_users WHERE id = '{id_hero}';", engine
        )
        keyboard = [
            [
                InlineKeyboardButton(
                    "–î–∞", callback_data=f"YES-DELETE-{id_hero}"
                ),
                InlineKeyboardButton(
                    "–ù–µ—Ç", callback_data=f"NO-DELETE-{id_hero}"
                ),
            ]
        ]
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–¢—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≥–µ—Ä–æ—è –ø–æ–¥ "
            f"–Ω–∏–∫–æ–º \"{info.loc[0, 'name']}\"?",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    elif "setting_profile" in query.data:
        id_hero = int(query.data.split("-")[1])
        user_triger[update.effective_chat.id] = {
            "triger": "setting_profile",
            "id": id_hero,
            "setting_hero": False,
        }
        await setting_button(update, "–ß—Ç–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å?")

    elif "print" in query.data:
        id_hero = query.data.split("-")[1]
        info = pd.read_sql(
            "SELECT id, name, rock, time_change_kz "
            "FROM heroes_of_users WHERE id = %(id_hero)s;",
            params={"id_hero": id_hero},
            con=engine,
        )
        await print_rock(update, context, info)
    elif "edit_name" in query.data:
        id_hero = int(query.data.split("-")[1])
        await edit_name(update, context, id_hero)


async def manul_kv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ö–í"""
    info = pd.read_sql(
        "SELECT text, name_text FROM text_table "
        "WHERE name_text in ('kv1','kv2');",
        con=engine,
    )
    if info.loc[0, "name_text"] == "kv1":
        text1 = info.iloc[0, 0]
        text2 = info.iloc[1, 0]
    else:
        text1 = info.iloc[1, 0]
        text2 = info.iloc[0, 0]
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=text1
    )
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(working_folder + "help/kv.jpg", "rb"),
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=text2
    )


async def date_x2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ö–í"""
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–°–æ—Ä—è–Ω, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. =(",
    )


async def schedule_of_clan_tasks(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    info = pd.read_sql(
        "SELECT text FROM text_table "
        "WHERE name_text = 'schedule_of_clan_tasks';",
        con=engine,
    )
    text = info.iloc[0, 0]
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def manul_aptechkam_kv(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ì–∞–π–¥ –ø–æ –∞–ø—Ç–µ—á–∫–∞–º –≤ –ö–í"""
    with open(working_folder + "help/Manual_KV.doc", "rb") as file:
        await context.bot.send_document(
            chat_id=update.effective_chat.id, document=file
        )


async def necessary_heroes_for_events(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥–µ—Ä–æ–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–æ–≤"""
    file_name = {
        "All_Event_Overviews_5_LQ.png": "–í—Å–µ –≥–µ—Ä–æ–∏ –∏–∑ —Å–æ–±—ã—Ç–∏–π.",
        "Sandariel-Event.png": "–°–∞–Ω–¥–∞—Ä–∏—ç–ª—å.",
        "Magnus-Event_Pass.png": "–ú–∞–≥–Ω—É—Å.",
        "Balthazar-Event.png": "–ë–∞–ª—å—Ç–∞–∑–∞—Ä.",
        "Gobliana-Event.png": "–ì–æ–±–ª—É—à–∫–∞.",
        "zigfrid.jpg": "–ó–∏–≥—Ñ—Ä–∏–¥.",
        "Daghan.jpg": "–î–∞'–ì–∞–Ω–∞.",
        "ivent_AOM.jpg": "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–∞–π–¥ –æ—Ç Pulcho.",
        "Infographic_Events-1.png": "–≥–∞–π–¥ –ø–æ —Å–æ–±—ã—Ç–∏—è–º.",
    }
    for name in file_name:
        with open(
            working_folder + f"help/necessary_heroes_for_events/{name}", "rb"
        ) as img:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=img,
                caption=file_name[name],
            )
    return


async def pak_and_counterpak(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–¢–∞–±–ª–∏—Ü–∞ –ø–∞–∫–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ø–∞–∫–æ–≤"""
    with open(working_folder + "help/pak_and_counterpak.jpg", "rb") as img:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id, photo=img
        )
    return


async def useful_links(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    info = pd.read_sql(
        "SELECT text FROM text_table " "WHERE name_text = 'useful_links';",
        con=engine,
    )
    text = info.iloc[0, 0]
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=text, parse_mode="MarkdownV2"
    )
    return


# –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
async def for_new_gamers(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    with open(working_folder + "help/manual_for_new_gamers.pdf", "rb") as pdf:
        await context.bot.send_document(
            chat_id=update.effective_chat.id, document=pdf
        )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="""–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:

[–∫–∞–Ω–∞–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∞–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤](https://t.me/aomstart)

–ì–∞–π–¥—ã:

[–ì–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –ø–æ –ø—É–Ω–∫—Ç–∞–º](https://t.me/helpaom2)

[–ì–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ](https://t.me/AoM_Jr/7)

–ß–∞—Ç—ã:

[—á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/floodAoM2)

[–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –∏–≥—Ä—ã](https://t.me/+-kXDhI4uG4Y4YTdi)""",
        parse_mode="MarkdownV2",
    )
    return


async def update_time_change_clan_task(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    type_msg = await get_type_msg(update)
    user_id = update[type_msg]["from_user"]["id"]
    msg_id = update[type_msg]["message_id"]
    chat_type = update[type_msg]["chat"]["type"]

    if chat_type == "supergroup" or chat_type == "group":
        group_triger[f"{user_id}@{update.effective_chat.id}"] = {
            "triger": "update_time_change_clan_task",
            "group": update.effective_chat.id,
            "user_id": user_id,
        }
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ –º–æ—Å–∫–≤–µ —Å–º–µ–Ω–∞ –ö–ó? –í–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å.\n"
            "–ü—Ä–∏–º–µ—Ä: 18",
            reply_to_message_id=msg_id,
        )
    return


async def remin15(
    update: Update, context: ContextTypes.DEFAULT_TYPE, if_start: bool
) -> None:
    """Start or stop remind time rock"""
    type_msg = await get_type_msg(update)
    chat_id = update.effective_chat.id
    msg_id = update[type_msg]["message_id"]
    chat_type = update[type_msg]["chat"]["type"]
    if chat_type == "supergroup" or chat_type == "group":
        await insert_and_update_sql(
            "UPDATA clans SET remain_zero_rock = :start "
            "WHERE chat_id = :chat_id;",
            params={
                "start": if_start,
                "chat_id": chat_id,
            },
        )
    if if_start:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û–∫, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ —á–∞—Å, –æ —Ç–æ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π.",
            reply_to_message_id=msg_id,
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ —Ö–æ—Ç–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ!üòù",
            reply_to_message_id=msg_id,
        )

    return


async def start_remin15(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    await remin15(update, context, if_start=True)
    return


async def stop_remin15(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    await remin15(update, context, if_start=False)
    return


async def handle_text(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    try:
        """{'update_id': 597348238,
        'message': {'delete_chat_photo': False,
                    'entities': [],
                    'new_chat_photo': [],
                    'date': 1665683250,
                    'chat': {'type': 'private',
                            'id': 943180118,
                            'first_name': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
                            'username': 'Menace134'},
                            'caption_entities': [],
                            'supergroup_chat_created': False,
                            'text': '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è‚öôÔ∏è',
                            'group_chat_created': False,
                            'channel_chat_created': False,
                            'photo': [],
                            'new_chat_members': [],
                            'message_id': 7075,
                            'from': {'id': 943180118,
                                    'is_bot': False,
                                    'language_code': 'ru',
                                    'first_name': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
                                    'username': 'Menace134'
                                    }
                            }
                    }"""
        type_msg = get_type_msg(update)
        user_id = update[type_msg]["from_user"]["id"]  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Å —Ç–µ–ª–µ–≥–∏
        msg = update[type_msg]["text"].lower()
        msg_id = update[type_msg]["message_id"]
        chat_type = update[type_msg]["chat"]["type"]

        if chat_type == "private":
            if msg in stop_word:
                await user(
                    update, context, sms="–û–∫, –æ—Ç–º–µ–Ω–∞! –ò–¥–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                )
            if user_id in user_triger:
                triger = user_triger[user_id]["triger"]
                if msg in stop_word:
                    await user(
                        update, context, sms="–û–∫, –æ—Ç–º–µ–Ω–∞! –ò–¥–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                    )
                if triger == "reg_start":
                    if msg != "/help":
                        name = (
                            update.message.text
                        )  # –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –∑–≤–∞—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è
                        if user_triger[user_id]["first"]:
                            if user_triger[user_id]["rename"]:
                                await insert_and_update_sql(
                                    "UPDATE heroes_of_users SET name = :name "
                                    "WHERE user_id = :user_id;",
                                    params={
                                        "name": name,
                                        "user_id": user_id,
                                    },
                                )
                            else:
                                variables = ""
                                values = ""
                                from_user = update.message.from_user
                                values_params = {
                                    "user_id": user_id,
                                    "first_name": from_user.first_name,
                                    "language_code": from_user.language_code,
                                    "last_name": from_user.last_name,
                                    "username": from_user.username,
                                }
                                if values_params["first_name"] is not None:
                                    variables += ", first_name"
                                    values += ", :first_name"
                                if values_params["language_code"] is not None:
                                    variables += ", language_code"
                                    values += ", :language_code"
                                if values_params["last_name"] is not None:
                                    variables += ", last_name"
                                    values += ", :last_name"
                                if values_params["username"] is not None:
                                    variables += ", username"
                                    values += ", :username"
                                try:
                                    await insert_and_update_sql(
                                        f"INSERT INTO telegram_users_id"
                                        f"(user_id{variables}) "
                                        f"VALUES(:user_id{values});",
                                        params=values_params,
                                    )
                                except Exception as err:
                                    print(err)
                                await insert_and_update_sql(
                                    "INSERT INTO heroes_of_users"
                                    "(user_id, name, clan_id) "
                                    "VALUES(:user_id, :name, :clan_id);",
                                    params={
                                        "user_id": user_id,
                                        "name": name,
                                        "clan_id": 1,
                                    },
                                )
                        else:
                            await insert_and_update_sql(
                                "INSERT INTO heroes_of_users"
                                "(user_id, name, clan_id) "
                                "VALUES(:user_id, :name, :clan_id);",
                                params={
                                    "user_id": user_id,
                                    "name": name,
                                    "clan_id": 1,
                                },
                            )
                        keyboard = [
                            [
                                InlineKeyboardButton(
                                    "–î–∞", callback_data="YES"
                                ),
                                InlineKeyboardButton(
                                    "–ù–µ—Ç", callback_data="NO"
                                ),
                            ]
                        ]
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f'–¢—ã –≥–µ—Ä–æ–π –ø–æ–¥ –Ω–∏–∫–æ–º "{name}"?',
                            reply_markup=InlineKeyboardMarkup(keyboard),
                        )
                elif triger == "edit_name":
                    # –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –∑–≤–∞—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è
                    name = update.message.text
                    id_hero = user_triger[update.message.from_user.id]["id"]
                    info = pd.read_sql(
                        "SELECT COUNT(*) FROM heroes_of_users "
                        "WHERE user_id = %(user_id)s AND id = %(id_hero)s;",
                        params={
                            "user_id": user_id,
                            "id_hero": id_hero,
                        },
                        con=engine,
                    )
                    if info.loc[0, "count"] != 0:
                        await insert_and_update_sql(
                            "UPDATE heroes_of_users SET name = :name "
                            "WHERE user_id = :user_id AND id = :id_hero",
                            params={
                                "name": name,
                                "user_id": user_id,
                                "id_hero": id_hero,
                            },
                        )
                        sms = f'–¢–µ–ø–µ—Ä—å —Ç–µ–±—è –∑–æ–≤—É—Ç: "{name}"!'
                        await context.bot.send_message(
                            chat_id=user_id, text=sms
                        )
                elif triger == "time_zone":
                    await time_zone(
                        update,
                        context,
                        msg,
                        user_triger[user_id]["tz"],
                        user_triger[user_id]["id"],
                    )
                elif triger == "setting_profile":
                    if "–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –≥–µ—Ä–æ–µ–º" == msg:
                        await setting_hero_button(
                            update,
                            "–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≥–µ—Ä–æ—è, "
                            "–Ω—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –µ–≥–æ.",
                        )
                        user_triger[user_id]["setting_hero"] = True
                    elif "–ø–æ–¥–ø–∏—Å–∫–∏" in msg:
                        await subscription_button(
                            update, "–°–º–æ—Ç—Ä–∏...", user_triger[user_id]["id"]
                        )
                        user_triger[user_id]["setting_hero"] = True
                    elif "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è..." == msg:
                        await edit_time_button(update, "–ú–µ–Ω—è–π...")
                        user_triger[user_id]["setting_hero"] = True
                    elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è" == msg:
                        info = pd.read_sql_query(
                            """
                            SELECT heroes_of_users.*, clans.name_clan
                            FROM heroes_of_users INNER JOIN clans
                                ON (clans.id=heroes_of_users.clan_id)
                            WHERE heroes_of_users.user_id = %(user_id)s
                                AND heroes_of_users.id = %(id_hero)s;
                            """,
                            params={
                                "user_id": user_id,
                                "id_hero": user_triger[user_id]["id"],
                            },
                            con=engine,
                        )
                        if str(info.loc[0, "name_clan"]) != "–ë–µ–∑ –∫–ª–∞–Ω–∞":
                            clan = f"–¢—ã –≤ –∫–ª–∞–Ω–µ \"{info.loc[0, 'name_clan']}\""
                        else:
                            clan = ""
                        # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ–Ω—É –∫–∑
                        smena_kz = str(info.loc[0, "time_change_kz"])
                        # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–±–æ—Ä —ç–Ω–µ—Ä–≥–∏–∏
                        sbor_energi = str(
                            info.loc[0, "time_collection_energy"]
                        )

                        if info.loc[0, "subscription_rock"]:
                            subscription_rock_text = (
                                "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ –∫–∞–º–Ω—è–º."
                            )
                        else:
                            subscription_rock_text = (
                                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ –∫–∞–º–Ω—è–º."
                            )
                        if info.loc[0, "subscription_energy"]:
                            subscription_energi_text = (
                                "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ —Å–±–æ—Ä—É —ç–Ω–µ—Ä–≥–∏–∏."
                            )
                        else:
                            subscription_energi_text = (
                                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ "
                                "–ø–æ —Å–±–æ—Ä—É —ç–Ω–µ—Ä–≥–∏–∏."
                            )
                        if info.loc[0, "subscription_energy"]:
                            description_of_the_kz_text = (
                                "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ó."
                            )
                        else:
                            description_of_the_kz_text = (
                                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ó."
                            )
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–¢–≤–æ–π –Ω–∏–∫ –≤ –∏–≥—Ä–µ: {info.loc[0, 'name']}\n"
                            f"{subscription_rock_text}\n"
                            f"{subscription_energi_text}\n"
                            f"{description_of_the_kz_text}\n"
                            f"–í—Ä–µ–º—è —Å–º–µ–Ω—ã –ö–ó: {smena_kz}:30 –ø–æ –º—Å–∫ \n"
                            "–í—Ä–µ–º—è —Å–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏: "
                            f"{sbor_energi}:00 –ø–æ –º—Å–∫\n"
                            f"{clan}",
                        )
                    elif "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –∫–∑" == msg:
                        await cancel_button(
                            update,
                            sms="–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ –º–æ—Å–∫–≤–µ —Å–º–µ–Ω–∞ –ö–ó? "
                            "–í–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å.\n –ü—Ä–∏–º–µ—Ä: 18",
                        )
                        user_triger[user_id] = {
                            "triger": "time_zone",
                            "tz": True,
                            "id": user_triger[user_id]["id"],
                        }
                    elif "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–±–æ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏" == msg:
                        await cancel_button(
                            update,
                            sms="–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ –º–æ—Å–∫–≤–µ –ø–µ—Ä–≤—ã–π —Å–±–æ—Ä —ç–Ω–µ—Ä–≥–∏–∏ "
                            "(—Å–∏–Ω—å–∫–∞ –∏ —Ñ–∏–æ–ª–µ—Ç–∫–∞)? –í–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å.\n "
                            "–ü—Ä–∏–º–µ—Ä: 12",
                        )
                        user_triger[user_id] = {
                            "triger": "time_zone",
                            "tz": False,
                            "id": user_triger[user_id]["id"],
                        }
                    elif (
                        "—É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è" in msg
                        or "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è" in msg
                    ):
                        # info = pd.read_sql(
                        # f"SELECT * FROM heroes_of_users
                        # WHERE user_id = '{user_id}'
                        # and id = '{user_triger[user_id]['id']}';", engine)
                        # num = len(info)
                        # if num >= 2:
                        #     if "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è" in msg:
                        #         delete = False
                        #     else:
                        #         delete = True
                        #     edit(update, context, num, info, delete)
                        # else:
                        if "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è" in msg:
                            await edit_name(
                                update,
                                context,
                                int(user_triger[user_id]["id"]),
                            )
                        else:
                            await delete_person(
                                update,
                                context,
                                int(user_triger[user_id]["id"]),
                            )
                    elif "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" in msg or "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è" in msg:
                        who_edit = ""
                        text = ""
                        if (
                            "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –æ —Å–º–µ–Ω–µ –∫–∑ –∑–∞ —á–∞—Å"
                            == msg
                        ):
                            who_edit = "subscription_rock = '1'"
                            text = "–ï—Å–ª–∏ —É –≤–∞—Å –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ 600 –∫–∞–º–Ω–µ–π, \
—è –≤–∞–º –Ω–∞–ø–æ–º–Ω—é –æ–± —ç—Ç–æ–º –∑–∞ —á–∞—Å –¥–æ —Å–º–µ–Ω—ã –ö–ó."
                        elif (
                            "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –æ —Å–º–µ–Ω–µ –∫–∑ –∑–∞ —á–∞—Å"
                            == msg
                        ):
                            who_edit = "subscription_rock = '0'"
                            text = "–•–æ—Ä–æ—à–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å \
–ø—Ä–æ –∫–∞–º–Ω–∏... –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                        elif (
                            "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –ø–æ —Å–±–æ—Ä—É —ç–Ω–µ—Ä–≥–∏–∏"
                            == msg
                        ):
                            who_edit = "subscription_energy = '1'"
                            text = "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –í–∞–º –ø—Ä–æ —ç–Ω–µ—Ä–≥–∏—é."
                        elif (
                            "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –ø–æ —Å–±–æ—Ä—É —ç–Ω–µ—Ä–≥–∏–∏" == msg
                        ):
                            who_edit = "subscription_energy = '0'"
                            text = "–•–æ—Ä–æ—à–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –í–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å \
–ø—Ä–æ —ç–Ω–µ—Ä–≥–∏—é..."
                        elif "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∑" == msg:
                            who_edit = "description_of_the_kz = '1'"
                            text = "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –∫—Ä–∞—Ç–∫–æ–µ \
–æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."
                        elif "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∑" == msg:
                            who_edit = "description_of_the_kz = '0'"
                            text = "–•–æ—Ä–æ—à–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º \
–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."
                        await insert_and_update_sql(
                            f"UPDATE heroes_of_users SET {who_edit} "
                            "WHERE user_id = :user_id AND id = :id_hero",
                            params={
                                "user_id": user_id,
                                "id_hero": user_triger[user_id]["id"],
                            },
                        )
                        await subscription_button(
                            update, text, int(user_triger[user_id]["id"])
                        )
                    elif "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è" in msg:
                        await cancel_button(update, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?")
                        user_triger[user_id] = {
                            "triger": "reg_start",
                            "first": False,
                            "rename": False,
                        }
                    elif "üîô–Ω–∞–∑–∞–¥üîô" == msg:
                        if user_triger[user_id]["setting_hero"]:
                            await setting_button(update, "–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å.")
                            user_triger[user_id]["setting_hero"] = False
                        else:
                            await new_button(
                                update, "–ü–æ–≥–Ω–∞–ª–∏, –Ω–∞–∑–∞–¥, –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                            )
                            user_triger.pop(user_id)
                if user_id in user_triger and triger != "setting_profile":
                    if triger == "edit_name" or triger == "time_zone":
                        user_triger[user_id] = {
                            "triger": "setting_profile",
                            "id": user_triger[user_id]["id"],
                            "setting_hero": True,
                        }
                    else:
                        user_triger.pop(user_id)

            else:
                if (
                    msg.isnumeric() and update.message.chat.type == "private"
                ) or (
                    "–ª—é—Ü–∏–∫ –¥–æ–±–∞–≤—å" in msg
                    and (
                        update.message.chat.type == "supergroup"
                        or update.message.chat.type == "group"
                    )
                ):
                    if update.message.chat.type == "supergroup":
                        if (
                            msg.replace("–ª—é—Ü–∏–∫ –¥–æ–±–∞–≤—å", "")
                            .replace(" ", "")
                            .isnumeric()
                        ):
                            sms = msg.replace("–ª—é—Ü–∏–∫ –¥–æ–±–∞–≤—å", "").replace(
                                " ", ""
                            )
                            await context.bot.send_message(
                                chat_id=update.message.chat.id,
                                text="–ì–ª—è–Ω—å –≤ –ª–∏—á–∫—É...",
                            )
                        else:
                            await context.bot.send_message(
                                chat_id=update.message.chat.id,
                                text="–¢—ã —á—Ç–æ, —Ö–æ—á–µ—à—å –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? "
                                "–ú–Ω–µ –Ω—É–∂–Ω—ã —Ü–∏—Ñ—Ä—ã! \n(–Ω–∞–ø–∏—à–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ, "
                                '–Ω–∞ –ø—Ä–∏–º–µ—Ä: "–õ—é—Ü–∏–∫ –¥–æ–±–∞–≤—å 400")',
                            )
                            return
                    else:
                        sms = msg
                    if 0 <= int(sms) <= 600:
                        info = pd.read_sql(
                            "SELECT id, name FROM heroes_of_users "
                            "WHERE user_id = %(user_id)s;",
                            params={"user_id": user_id},
                            con=engine,
                        )
                        keyboard = []
                        if len(info) == 1:
                            await add_rock(
                                update, context, int(sms), info.loc[0, "id"]
                            )  # –ø–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞–º–Ω–µ–π
                        else:
                            for idx, row in info.iterrows():
                                keyboard.append(
                                    [
                                        InlineKeyboardButton(
                                            str(row["name"]),
                                            callback_data=f"Add_Rock-{sms}-"
                                            f'{row["id"]}',
                                        )
                                    ]
                                )
                            await context.bot.send_message(
                                chat_id=user_id,
                                text="–ö–æ–º—É –¥–æ–±–∞–≤–∏–º –∫–∞–º–Ω–∏?",
                                reply_markup=InlineKeyboardMarkup(keyboard),
                            )
                    else:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="–¢—ã —á—Ç–æ, —Ö–æ—á–µ—à—å –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? "
                            "–ü—Ä–æ–≤–µ—Ä—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∫–∞–º–Ω–µ–π!",
                        )
                elif (
                    ("—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∫–∞–º–Ω–µ–π?" in msg)
                    or ("—Å–∫–æ–ª—å–∫–æ" in msg)
                    and update.message.chat.type == "private"
                ):
                    info = pd.read_sql(
                        "SELECT id, name, rock, time_change_kz "
                        "FROM heroes_of_users WHERE user_id = %(user_id)s;",
                        params={"user_id": user_id},
                        con=engine,
                    )  # –ø–æ–∏—Å–∫ –∞–π–¥–∏ –≤ –ë–î
                    keyboard = []
                    if len(info) == 1:
                        await print_rock(update, context, info)
                    else:
                        for idx, row in info.iterrows():
                            keyboard.append(
                                [
                                    InlineKeyboardButton(
                                        str(row["name"]),
                                        callback_data=f'print-{row["id"]}',
                                    )
                                ]
                            )
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="–ö—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                        )
                elif (
                    "–ø—Ä–∏–≤" in msg and update.message.chat.type == "private"
                ) or (
                    ("–ª—é—Ü" in msg or "–≤—Å–µ–º" in msg or "–¥–æ–±—Ä–æ–µ" in msg)
                    and (
                        "–ø—Ä–∏–≤" in msg
                        or "–∫—É" in msg
                        or "–∑–¥–∞—Ä–æ–≤" in msg
                        or "—É—Ç—Ä" in msg
                    )
                    and (
                        update.message.chat.type == "supergroup"
                        or update.message.chat.type == "group"
                    )
                ):
                    name = ""
                    info = pd.read_sql(
                        "SELECT name FROM heroes_of_users "
                        "WHERE user_id = %(user_id)s;",
                        params={"user_id": user_id},
                        con=engine,
                    )
                    if not info.empty:
                        name = str(info.loc[0, "name"])
                    else:
                        if update.message.from_user.first_name is not None:
                            name = update.message.from_user.first_name
                        elif update.message.from_user.username is not None:
                            name = update.message.from_user.username
                    rand_num = random.randint(1, 5)
                    if rand_num == 1:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–ü—Ä–∏–≤–µ—Ç, {name}!",
                            reply_to_message_id=msg_id,
                        )
                    elif rand_num == 2:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–ü—Ä–∏–≤–µ—Ç, {name}, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?.. "
                            "–•–æ—Ç—è, –∑–Ω–∞–µ—à—å,–Ω–µ –æ—Ç–≤–µ—á–∞–π... "
                            "–∏ —Ç–∞–∫ –∑–Ω–∞—é —á—Ç–æ —Ö–æ—Ä–æ—à–æ.",
                            reply_to_message_id=msg_id,
                        )
                    elif rand_num == 3:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–ö—É, {name}.",
                            reply_to_message_id=msg_id,
                        )
                    elif rand_num == 4:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–ü—Ä–∏–≤–µ—Ç, {name}, —Ç—ã —É–∂–µ –Ω–∞–±–∏–ª 600 –∫–∞–º–Ω–µ–π? "
                            "–ï—Å–ª–∏ –Ω–µ—Ç, –∏–¥–∏ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è "
                            "–ø–æ–∫–∞ –Ω–µ –Ω–∞–±—å–µ—à—å!",
                            reply_to_message_id=msg_id,
                        )
                    elif rand_num == 5:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–ù—É –ø—Ä–∏–≤–µ—Ç, {name}, –µ—Å–ª–∏ –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å",
                            reply_to_message_id=msg_id,
                        )
                elif "–ª—é—Ü" in msg and "—Ä–µ–π–¥" in msg:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="–°–µ–π—á–∞—Å!",
                        reply_to_message_id=msg_id,
                    )
                    sms = "–†–µ–π–¥ –æ—Ç–∫—Ä—ã—Ç –∑–∞—Ö–æ–¥–∏–º —Å–æ–≥–ª–∞—Å–Ω–æ –∫—É–ø–ª–µ–Ω–Ω—ã–º –±–∏–ª–µ—Ç–∞–º!"
                    if (
                        "—á—Ç–æ" in msg
                        or "—á—ë" in msg
                        or "—á–æ" in msg
                        or "—á–µ" in msg
                    ):
                        rand_num = 4
                    else:
                        rand_num = random.randint(1, 3)
                    if rand_num == 1:
                        await context.bot.send_message(
                            chat_id=update.message.chat.id,
                            text="–ê–Ω—É –±—ã—Å—Ç—Ä–æ –≤ —Ä–µ–π–¥! –ö—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ—Ç –õ–û–•!)",
                        )
                        with open(
                            working_folder + "AnimatedSticker.tgs", "rb"
                        ) as sticker:
                            await context.bot.send_sticker(
                                chat_id=update.message.chat.id, sticker=sticker
                            )
                    elif rand_num == 2:
                        await context.bot.send_message(
                            chat_id=update.message.chat.id,
                            text="–†–µ–π–¥ –æ—Ç–∫—Ä—ã—Ç –∑–∞—Ö–æ–¥–∏–º —Å–æ–≥–ª–∞—Å–Ω–æ "
                            "–∫—É–ø–ª–µ–Ω–Ω—ã–º –±–∏–ª–µ—Ç–∞–º",
                        )
                        with open(
                            working_folder + "sticker.webp", "rb"
                        ) as sticker:
                            await context.bot.send_sticker(
                                chat_id=update.message.chat.id, sticker=sticker
                            )
                    elif rand_num == 3:
                        await context.bot.send_message(
                            chat_id=update.message.chat.id,
                            text="–ù–µ –≤–∏–∂—É –≤–∞—à–∏—Ö –∂–æ–ø–æ–∫ –Ω–∞ —Ä–µ–π–¥–µ!!! "
                            "–ë–´–°–¢–†–û –í –†–ï–ô–î!",
                        )
                    elif rand_num == 4:
                        await context.bot.send_message(
                            chat_id=update.message.chat.id,
                            text="–ù–µ –∑–Ω–∞—é –∫–∞–∫, –Ω–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ä–µ–π–¥ –Ω–∞ 100%!",
                        )
                        with open(working_folder + "frog.mp4", "rb") as video:
                            await context.bot.send_video(
                                chat_id=update.message.chat.id, video=video
                            )
                elif (
                    "–æ—Ç–∫—Ä—ã—Ç" in msg
                    and "—Ä–µ–π–¥" in msg
                    and (
                        update.message.chat.type == "supergroup"
                        or update.message.chat.type == "group"
                    )
                ):
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="–í –∞—Ç–∞–∫—É—É—É—É—É... =)",
                        reply_to_message_id=msg_id,
                    )
                    sms = "–†–µ–π–¥ –æ—Ç–∫—Ä—ã—Ç –∑–∞—Ö–æ–¥–∏–º —Å–æ–≥–ª–∞—Å–Ω–æ –∫—É–ø–ª–µ–Ω–Ω—ã–º –±–∏–ª–µ—Ç–∞–º!"
                    with open(
                        working_folder + "video_2021-05-03_21-58-18.mp4", "rb"
                    ) as video:
                        await context.bot.send_video(
                            chat_id=update.message.chat.id, video=video
                        )
                elif "üíµ–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—éüí∏" == msg:
                    rand_num = random.randint(1, 15)
                    if rand_num == 1:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="–ú–Ω–µ –Ω–∞ –∂–∏–ª—å–µ, –Ω–∞ –±–æ–ª—å—à–æ–π –∏ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π "
                            "—Å–µ—Ä–≤–µ—Äüòá",
                        )
                    elif rand_num == 2:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="–ú–æ–µ–º—É —Å–æ–∑–∞–¥—Ç–µ–ª—é –Ω–∞ –∫–æ—Ñ–µ‚òïÔ∏è",
                        )
                    elif rand_num == 3:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="–ú–æ–µ–º—É —Å–æ–∑–∞–¥—Ç–µ–ª—é –Ω–∞ –µ–¥—Éüç≤Ô∏è",
                        )
                    elif rand_num == 4:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="–ú–æ–µ–º—É —Å–æ–∑–∞–¥—Ç–µ–ª—é –Ω–∞ –µ–¥—Éüç∫üòà",
                        )
                    elif rand_num == 5:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdXBkLGI0l7SBevxq54AYD"
                            "fwqgrRUAAOwDQAC4mD4SPhHhqikFBgNLwQ",
                        )
                    elif rand_num == 6:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdXJkLGJcvt8bKENug5F9C3"
                            "b8lLUC8gACuQsAAsqaoUkN2KXU8e7Say8E",
                        )
                    elif rand_num == 7:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdXRkLGJ2W6EizKHiIMyMp"
                            "QvRhSfxUgACSBMAAt2FmElzhpwNSO5yBy8E",
                        )
                    elif rand_num == 8:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdXZkLGKYqURjcg-n55R5to"
                            "5rxaAcyQACnwoAApNloUnjCXxz3frjTi8E",
                        )
                    elif rand_num == 9:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdXhkLGKn4-BH-6ihPjj4Yl"
                            "PIhaumAwACIQsAAjooAUkWkfFshXQHLi8E",
                        )
                    elif rand_num == 10:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdXpkLGLSR9RNFUtB6SNh5S"
                            "JN5GIWYAACTwsAAs4XAAFJ4ud9u0yjrhgvBA",
                        )
                    elif rand_num == 11:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdX9kLGLwylwuMSwGj_kXkWc"
                            "U_SPb9QACwRQAAqUqCUhsSHVuhH-2XC8E",
                        )
                    elif rand_num == 12:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdYFkLGMILgAB7VKOrsNO5e"
                            "S3qrtzps0AAl0oAALZEiFKDZLyZ6WHRZMvBA",
                        )
                    elif rand_num == 13:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgIAAxkBAAEIdYNkLGMcwyMEgf3qBdt6X6"
                            "T3ey4-QQACaAsAAtv7OUnL_oTTDlslMi8E",
                        )
                    elif rand_num == 14:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgQAAxkBAAEIdYdkLGQWkK6dqfhrxqQo53"
                            "zEuqSqHAAC5gsAAk8cWVNQLKJXQdhgTi8E",
                        )
                    elif rand_num == 15:
                        await context.bot.send_sticker(
                            chat_id=update.effective_chat.id,
                            sticker="CAACAgQAAxkBAAEIdYlkLGQat8x1t7j2NPJ01v"
                            "ge-ixN7QACxQwAAplx6FAZ8I5wA_llpi8E",
                        )
                    # keyboard = [[InlineKeyboardButton(
                    # "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
                    # url='https://www.tinkoff.ru/rm/tkachev.'
                    #     'konstantin69/3j6lJ87953'
                    # )]]
                    # with open(working_folder + "QR-code.jpg", "rb") as img:
                    #     await context.bot.send_photo(
                    #         chat_id=update.effective_chat.id,
                    #         photo=img,
                    #         caption="QR\-–∫–æ–¥ –Ω–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ "
                    #                 "—Å–∞–π—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
                    #         parse_mode='MarkdownV2',
                    #         reply_markup=InlineKeyboardMarkup(keyboard)
                    #     )
                    # "[–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞](https://t.me/Menace134)
                    # \- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢\.", parse_mode='MarkdownV2'
                    # await context.bot.send_message(
                    #     chat_id=update.effective_chat.id,
                    #     text='–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '
                    #          '—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∞.'
                    # )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É, —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ... @menace134",
                    )
                elif "–ø–æ–º–æ—â—å" in msg:
                    await help_my_button(
                        update, "–í–æ—Ç, –ª–∏—Å—Ç–∞–π —Å–ø–∏—Å–æ–∫, –≤—ã–±–∏—Ä–∞–π!"
                    )
                elif "–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" == msg:
                    await help_button(update, "–í–æ—Ç, –ª–∏—Å—Ç–∞–π —Å–ø–∏—Å–æ–∫, –≤—ã–±–∏—Ä–∞–π!")
                elif "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è" in msg:
                    await cancel_button(update, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?")
                    user_triger[user_id] = {
                        "triger": "reg_start",
                        "first": False,
                        "rename": False,
                    }
                elif "‚öôÔ∏è–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è‚öôÔ∏è" == msg:
                    info = pd.read_sql_query(
                        "SELECT id, name FROM heroes_of_users "
                        "WHERE user_id = %(user_id)s",
                        params={"user_id": user_id},
                        con=engine,
                    )
                    if len(info) == 1:
                        user_triger[user_id] = {
                            "triger": "setting_profile",
                            "id": info.loc[0, "id"],
                            "setting_hero": False,
                        }
                        await setting_button(update, "–ß—Ç–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å?")
                    else:
                        keyboard = []
                        for idx, row in info.iterrows():
                            keyboard += [
                                [
                                    InlineKeyboardButton(
                                        str(row["name"]),
                                        callback_data="setting_profile-"
                                        f'{row["id"]}',
                                    )
                                ]
                            ]
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                        )
                elif "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é" == msg:
                    info = pd.read_sql(
                        "SELECT text FROM text_table "
                        "WHERE name_text = 'Instructions_for_use';",
                        con=engine,
                    )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id, text=info.iloc[0, 0]
                    )
                elif "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—è –∫ —á–∞—Ç—É" == msg:
                    info = pd.read_sql(
                        "SELECT text FROM text_table WHERE name_text = "
                        "'Instructions_for_implementing_the_bot_in_the_chat';",
                        con=engine,
                    )
                    text = (
                        str(info.iloc[0, 0])
                        .replace(">", "\>")
                        .replace("#", "\#")
                        .replace("+", "\+")
                        .replace("=", "\=")
                        .replace("-", "\-")
                        .replace("{", "\{")
                        .replace("}", "\}")
                        .replace(".", "\.")
                        .replace("!", "\!")
                    )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=text,
                        parse_mode="MarkdownV2",
                    )
                elif "–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ" == msg or (
                    "–ª—é—Ü" in msg
                    and (
                        "–∫–æ–º–∞–Ω–¥—ã" in msg
                        or (
                            (
                                "—á—Ç–æ" in msg
                                or "—á–µ" in msg
                                or "—á—ë" in msg
                                or "—á–æ" in msg
                            )
                            and "—É–º–µ–µ—à—å" in msg
                        )
                    )
                ):
                    info = pd.read_sql(
                        "SELECT text FROM text_table "
                        "WHERE name_text = 'Basic_commands_in_the_chat';",
                        con=engine,
                    )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id, text=info.iloc[0, 0]
                    )
                elif "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–≤" == msg:
                    await manul_kv(update, context)
                elif "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π" == msg:
                    await schedule_of_clan_tasks(update, context)
                elif "–ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏" == msg:
                    await useful_links(update, context)
                elif "–≥–∞–π–¥ –ø–æ –∞–ø—Ç–µ—á–∫–∞–º –≤ –∫–≤" == msg:
                    await manul_aptechkam_kv(update, context)
                elif "–∫–æ–≥–æ –∫–∞—á–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ—Ä–æ–µ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏–π?" == msg:
                    await necessary_heroes_for_events(update, context)
                elif "–¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤" == msg:
                    await for_new_gamers(update, context)
                elif (
                    "–∫–∞–∫ –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É, "
                    "–µ—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏" == msg
                ):
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="https://telegra.ph/Kak-zajti-v-igru-esli-po-"
                        "kakim-to-prichinam-ne-poluchaetsya-zajti-07-22-3",
                    )
                elif "–∫–æ–≥–æ –∫–∞—á–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ" == msg:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É zOrg –Ω–∞–ø–∏—Å–∞–ª "
                        "[—Å—Ç–∞—Ç—å—é](https://telegra.ph/Nachalnyj-pak-11-"
                        "17)\, –≤–æ—Ç –¥–µ—Ä–∂–∏\!\)",
                        parse_mode="MarkdownV2",
                    )
                elif "–∫–æ–≥–¥–∞ –∫–≤?" == msg:
                    info = pd.read_sql(
                        "SELECT text FROM text_table "
                        "WHERE name_text = 'when_kv';",
                        con=engine,
                    )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id, text=info.iloc[0, 0]
                    )
                elif "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ö2, —Ö3 –∏ –¥–∞—Ç—ã –∫–≤" == msg:
                    with open(
                        working_folder + "help/schedule_x2_x3.jpg", "rb"
                    ) as img:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=img,
                            caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ö2, —Ö3 –∏ –∫–≤ –Ω–∞ 2023–≥",
                        )
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–ö–∞–Ω–∞–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏: —Ö2, —Ö3 –∏ "
                        "–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∫–≤:\n@AoMx2",
                    )
                elif "–ø–∞–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–ø–∞–∫–∏" == msg:
                    for name in [
                        "pak_and_counterpak1",
                        "pak_and_counterpak2",
                        "pak_and_counterpak3",
                        "pak_and_counterpak4",
                        "pak_and_counterpak5",
                    ]:
                        with open(
                            working_folder + f"help/{name}.jpg", "rb"
                        ) as img:
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id, photo=img
                            )
                elif "–∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–∞ 3*" == msg:
                    with open(
                        working_folder + "help/recent_trials.doc", "rb"
                    ) as doc:
                        await context.bot.send_document(
                            chat_id=update.effective_chat.id, document=doc
                        )
                elif "—Å—Ö–µ–º—ã –≤—Å–µ—Ö —Ä–µ–π–¥–æ–≤" == msg:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="[–°—Ö–µ–º—ã –≤—Å–µ—Ö —Ä–µ–π–¥–æ–≤](https://drive.google.com/"
                        "folderview?id=1-9P7YK6He09vgheEQd4rK5zf-H5QXDFi)"
                        "\n\n[–°—Ö–µ–º—ã –≤—Å–µ—Ö —Ä–µ–π–¥–æ–≤ –æ—Ç üî• Li \[–§–µ–Ω–∏–∫—Å\]]"
                        "(https://telegra.ph/Shemy-rejdov-05-19)",
                        parse_mode="MarkdownV2",
                    )
                elif "üîô–Ω–∞–∑–∞–¥üîô" == msg:
                    await new_button(update, "–ü–æ–≥–Ω–∞–ª–∏, –Ω–∞–∑–∞–¥, –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                    if user_id in user_triger:
                        user_triger.pop(user_id)
                else:
                    await chatterbox.get_chat_text_messages(update, context)
        elif chat_type == "supergroup" or chat_type == "group":
            if f"{user_id}@{update.effective_chat.id}" in group_triger:
                triger = group_triger[f"{user_id}@{update.effective_chat.id}"][
                    "triger"
                ]
                if triger == "update_time_change_clan_task":
                    if msg.isnumeric():
                        if 1 <= int(msg) <= 24:
                            await insert_and_update_sql(
                                "UPDATE clans SET time_kz = :msg "
                                "WHERE chat_id = :chat_id;",
                                params={
                                    "msg": msg,
                                    "chat_id": update.effective_chat.id,
                                },
                            )
                            await context.bot.send_message(
                                chat_id=update.effective_chat.id,
                                text="–í—Ä–µ–º—è —É–º–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                            )
                        else:
                            await context.bot.send_message(
                                chat_id=update.effective_chat.id,
                                text="–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–≤–µ!",
                            )
                    else:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="–í–≤–æ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏",
                        )
                group_triger.pop(f"{user_id}@{update.effective_chat.id}")

            elif "id" == msg:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id, message_id=msg_id
                    )
                except Exception:
                    await context.bot.send_message(
                        chat_id=my_tid,
                        text=f"ID: {update.effective_chat.id}\nname: \
{update.effective_chat.title}\nUser_id: {user_id}\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å \
—Å–º—Å 'id'",
                    )
                info = pd.read_sql(
                    "SELECT COUNT(*) FROM clans "
                    "WHERE chat_id = %(chat_id)s;",
                    params={
                        "chat_id": update.effective_chat.id,
                    },
                    con=engine,
                )
                if info.loc[0, "count"] == 0:
                    await insert_and_update_sql(
                        "INSERT INTO clans(chat_id, name_clan) "
                        "VALUES(:chat_id, :name_clan);",
                        params={
                            "chat_id": update.effective_chat.id,
                            "name_clan": update.effective_chat.title,
                        },
                    )
    except Exception as error:
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏
        logging.error(f"–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞ {error}")


def main() -> None:
    """Run the bot."""
    # Create the Application and pass it your bot's token.
    # –ø–æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º –ø–æ —Ç–æ–∫–µ–Ω—É
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # simple start function
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("help", helper))
    application.add_handler(CommandHandler("edit_name", edit_name))
    application.add_handler(
        CommandHandler("clan_tasks", schedule_of_clan_tasks)
    )
    application.add_handler(CommandHandler("manul_kv", manul_kv))
    application.add_handler(CommandHandler("manul_ap_kv", manul_aptechkam_kv))
    application.add_handler(
        CommandHandler("heroes_for_events", necessary_heroes_for_events)
    )
    # application.add_handler(CommandHandler('date_x2', date_x2))
    application.add_handler(
        CommandHandler("pak_and_counterpak", pak_and_counterpak)
    )
    application.add_handler(CommandHandler("useful_links", useful_links))

    # chat commands
    application.add_handler(
        CommandHandler(
            "update_time_change_clan_task", update_time_change_clan_task
        )
    )
    application.add_handler(CommandHandler("start_remin15", start_remin15))
    application.add_handler(CommandHandler("stop_remin15", stop_remin15))

    # Add callback query handler to start the payment invoice
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.ALL, handle_text))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    u_data = UserData()
    main()
